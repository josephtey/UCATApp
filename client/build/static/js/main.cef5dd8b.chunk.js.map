{"version":3,"sources":["serviceWorker.js","api/db.js","utils/helpers.js","actions/session.js","reducers/session.js","actions/content.js","reducers/content.js","actions/auth.js","reducers/auth.js","store.js","components/Shared/Loading.js","screens/Home.js","components/Shared/Elements.js","screens/Exam.js","components/Session/BottomBar.js","components/Session/Question.js","components/Session/Answer.js","components/Session/Review.js","components/Session/Start.js","components/Session/Results.js","screens/Session.js","screens/Login.js","components/Header/NavBar.js","App.js","index.js","assets/in2medlogo.png"],"names":["Boolean","window","location","hostname","match","db","axios","create","baseURL","db_getAllExams","a","get","response","console","log","data","db_getExamDetail","structure_id","toString","db_getSectionDetail","section_id","db_getQuestionDetail","question_id","db_createSession","student_id","put","db_updateSession","session_id","fields","post","db_updateSessionTime","type","db_findSession","db_getAllStructureSessions","headers","db_createResponse","value","correct","flagged","timestamp","Date","getTime","db_updateResponse","response_id","db_createBareResponse","db_flagResponse","db_findResponse","db_findStem","stem_id","db_getAllSectionResponses","group_id","db_getAllSessionResponses","db_userExists","username","db_createUser","wp_authenticate","email","password","useDidMountEffect","func","deps","didMount","useRef","useEffect","current","filterResponses","responses","property","filteredResponses","i","length","push","setCookie","name","days","expires","date","setTime","toUTCString","document","cookie","getCookie","nameEQ","ca","split","c","charAt","substring","indexOf","createResponseRequest","createResponseSuccess","newResponse","createResponse","answer","dispatch","error","flagResponseRequest","flagResponseSuccess","flagResponse","getSessionDetailsRequest","getSessionDetailsSuccess","sessionDetails","sessionResponses","currentSection","currentStructure","currentQuestion","mode","allSections","currentStem","currentQuestionOrder","nextSectionRequest","nextSectionSuccess","updatedSession","getSectionRequest","getSectionSuccess","getSessionResponsesRequest","getSessionResponses","createSessionRequest","createSessionSuccess","currentSession","getQuestionDetailRequest","getQuestionDetailSuccess","questionDetail","getQuestionDetailError","getQuestionDetail","reviewSection","stopSectionStartRequest","stopSectionStartSuccess","reviewQuestionsRequest","reviewQuestionsError","finishSessionRequest","finishSessionSuccess","finishedSession","initialState","isCreatingSession","isFetchingResponses","isCreatingResponse","isFetchingSession","isFetchingQuestionDetail","isFinishingSession","isUpdatingSession","isFlagging","getAllExamsRequest","getAllExamsSuccess","allExams","getExamDetailRequest","getExamDetailSuccess","examDetail","getStructureSessionsRequest","isFetchingExams","isFetchingExamDetail","isFetchingSectionDetail","isFetchingSessions","sectionDetail","structureSessions","jwt","require","initUserRequest","initUserSuccess","userData","initUserError","isCreatingUser","createStore","combineReducers","content","state","action","session","sessionResponse","question_order","updatedQuestionOrder","auth","applyMiddleware","thunk","logger","CenteredDiv","styled","div","props","duringSession","Loading","color","height","width","mapDispatchToProps","getAllExams","Title","Container","ExamList","CardHeading","CardText","CardLength","CardTop","CardBottom","Button","Card","connect","map","exam","key","onClick","history","description","time","size","label","ButtonPrimary","ButtonSecondary","LinkItem","children","Link","RadioBox","options","defaultValue","useState","selectedOption","setSelectedOption","item","RadioOption","selected","className","RadioBoxAnswer","correctValue","selectedValue","wrong","OptionLeft","OptionRight","NoSelectionText","FlagButton","isFlagged","setFlagged","FlagContainer","getExamDetail","resetExamDetail","createSession","getStructureSessions","sessions","SectionCard","sectionName","questionCount","status","CardLeft","CardTime","CardInfo","CardTitle","Caption","CardRight","PastSessions","Text","Sections","PreHeading","Header","HeaderLeft","HeaderRight","OrangeLink","params","details","completed","sections","section","sectionStartTime","sectionEndTime","start_time","end_time","timeLeft","sectionTime","startTime","Math","round","calculateTimeLeft","style","cursor","toLocaleDateString","score","BottomBar","leftContent","rightContent","BottomBarInner","BottomBarLeft","BottomBarRight","PreHeadingRight","PreHeadingLeft","MainContent","QuestionContent","QuestionStem","find","text","question","slice","currentQuestionId","currentQuestionIndex","nextQuestion","changeMode","ExplanationContent","ExplanationText","explanation","stopReview","nextSection","finishSession","scoreBreakdown","allSessionResponses","numCorrect","filter","section_order","score_breakdown","reviewQuestions","questions","QuestionCards","answered","incompleteQuestions","questionExists","j","getIncompleteQuestions","flaggedQuestions","currentSectionId","currentSectionIndex","stopSectionStart","WelcomeMessage","Info","Warning","returnHome","getSection","resetSection","SectionTitle","SectionCards","SectionHeader","SectionScore","SectionBox","getSessionDetails","currentIndex","resetSessionDetail","Timer","startTimestamp","sectionTimeLength","toFixed","setTimeLeft","timer","setTimeout","clearTimeout","TopBar","TopBarInner","TopBarLeft","TopBarRight","src","LogoImage","initUser","success","userInfo","decode","roles","includes","userExists","token","sign","LoadingContainer","LoginLogo","img","LoginBox","ErrorMessage","setUsername","setPassword","loading","setLoading","setAuthenticated","Logo","placeholder","onChange","e","target","logoutUser","NavItem","active","Nav","UserInfo","visible","setVisible","pathname","getUser","authenticated","theme","render","path","component","Session","Exam","Home","ReactDOM","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.cef5dd8b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\n\nconst db = axios.create({\n  baseURL: 'http://localhost:3000'\n});\n\nexport const db_getAllExams = async () => {\n  const response = await db.get('/structures/type/Exam')\n\n  console.log(response.data)\n\n  return response.data\n}\n\n\nexport const db_getExamDetail = async (structure_id) => {\n  const response = await db.get('/structures/' + structure_id.toString())\n  return response.data\n}\n\nexport const db_getSectionDetail = async (section_id) => {\n  const response = await db.get('/sections/' + section_id.toString())\n\n  return response.data\n}\n\nexport const db_getQuestionDetail = async (question_id) => {\n  const response = await db.get('/questions/' + question_id.toString())\n\n  return response.data\n}\n\nexport const db_createSession = async (structure_id, student_id) => {\n  const response = await db.put('/sessions/', {\n    structure_id,\n    student_id\n  })\n\n  return response.data\n}\n\nexport const db_updateSession = async (session_id, fields) => {\n  const response = await db.post('/sessions/' + session_id.toString(), fields)\n\n  return response.data\n}\n\nexport const db_updateSessionTime = async (session_id, type) => {\n  const response = await db.post('/sessions/' + session_id.toString() + '/time', {\n    type\n  })\n\n  return response.data\n}\n\nexport const db_findSession = async (session_id) => {\n  const response = await db.get('/sessions/' + session_id.toString())\n\n  return response.data\n}\n\n\nexport const db_getAllStructureSessions = async (structure_id, student_id) => {\n  const response = await db.get('/sessions/structure/' + structure_id.toString(), {\n    headers: {\n      student_id\n    }\n  })\n\n  return response.data\n}\n\n\nexport const db_createResponse = async (session_id, question_id, student_id, section_id, value, correct, flagged) => {\n  const response = await db.put('/responses/', {\n    session_id,\n    student_id,\n    question_id,\n    section_id,\n    value,\n    timestamp: new Date().getTime().toString(),\n    correct,\n    flagged\n  })\n\n  return response.data\n}\nexport const db_updateResponse = async (response_id, value, correct) => {\n  const response = await db.post('/responses/' + response_id.toString(), {\n    value,\n    correct\n  })\n\n  return response.data\n}\n\nexport const db_createBareResponse = async (session_id, question_id, student_id, section_id, flagged) => {\n  const response = await db.put('/responses/bare', {\n    session_id,\n    student_id,\n    question_id,\n    section_id,\n    timestamp: new Date().getTime().toString(),\n    flagged\n  })\n\n  return response.data\n\n}\n\nexport const db_flagResponse = async (response_id, flagged) => {\n  const response = await db.post('/responses/' + response_id.toString() + '/flag', {\n    flagged\n  })\n\n  return response.data\n}\n\nexport const db_findResponse = async (session_id, question_id) => {\n  const response = await db.post('/responses/find', {\n    session_id,\n    question_id\n  })\n\n  return response.data\n}\n\nexport const db_findStem = async (stem_id) => {\n  const response = await db.get('/stems/' + stem_id.toString())\n\n  return response.data\n}\n\nexport const db_getAllSectionResponses = async (session_id, section_id) => {\n  const response = await db.post('/responses/session/' + session_id.toString(), {\n    type: \"section\",\n    group_id: section_id\n  })\n\n  return response.data\n}\n\nexport const db_getAllSessionResponses = async (session_id) => {\n  const response = await db.post('/responses/session/' + session_id.toString(), {\n    type: \"structure\"\n  })\n\n  return response.data\n}\n\n\nexport const db_userExists = async (username) => {\n  const response = await db.get('/users/' + username)\n\n  return response.data\n}\n\nexport const db_createUser = async (username) => {\n  const response = await db.post('/users', {\n    username\n  })\n\n  return response.data\n}\n\nexport const wp_authenticate = async (email, password) => {\n  const response = await db.post(`https://in2med.com.au/?rest_route=/simple-jwt-login/v1/auth`, {\n    email,\n    password\n  })\n\n  return response.data\n}","import React, { useEffect, useRef } from 'react';\n\nexport const useDidMountEffect = (func, deps) => {\n  const didMount = useRef(false);\n\n  useEffect(() => {\n    if (didMount.current) func();\n    else didMount.current = true;\n  }, deps);\n}\n\nexport const getIncompleteQuestions = (questions, responses) => {\n  let incompleteQuestions = []\n\n  for (let i = 0; i < questions.length; i++) {\n    let questionExists = false\n    for (let j = 0; j < responses.length; j++) {\n      if (responses[j].question_id === questions[i]) {\n        questionExists = true\n        break\n      }\n    }\n    if (!questionExists) {\n      incompleteQuestions.push(questions[i])\n    }\n  }\n\n  return incompleteQuestions\n}\n\nexport const filterResponses = (responses, property) => {\n  let filteredResponses = []\n\n  for (let i = 0; i < responses.length; i++) {\n    if (responses[i][property]) {\n      filteredResponses.push(responses[i].question_id)\n    }\n  }\n\n  return filteredResponses\n}\n\nexport const setCookie = (name, value, days) => {\n  var expires = \"\";\n  if (days) {\n    var date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    expires = \"; expires=\" + date.toUTCString();\n  }\n  document.cookie = name + \"=\" + (value || \"\") + expires + \"; path=/\";\n}\nexport const getCookie = (name) => {\n  var nameEQ = name + \"=\";\n  var ca = document.cookie.split(';');\n  for (var i = 0; i < ca.length; i++) {\n    var c = ca[i];\n    while (c.charAt(0) == ' ') c = c.substring(1, c.length);\n    if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);\n  }\n  return null;\n}\nexport const eraseCookie = (name) => {\n  document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n}","import {\n  db_createSession,\n  db_getAllSectionResponses,\n  db_getAllSessionResponses,\n  db_createResponse,\n  db_findSession,\n  db_getSectionDetail,\n  db_getExamDetail,\n  db_getQuestionDetail,\n  db_findResponse,\n  db_updateResponse,\n  db_updateSession,\n  db_updateSessionTime,\n  db_flagResponse,\n  db_createBareResponse,\n  db_findStem\n} from '../api/db';\nimport { filterResponses } from '../utils/helpers'\n\nexport const CREATE_RESPONSE_REQUEST = 'CREATE_RESPONSE_REQUEST';\nexport const CREATE_RESPONSE_SUCCESS = 'CREATE_RESPONSE_SUCCESS';\nexport const CREATE_RESPONSE_ERROR = 'CREATE_RESPONSE_ERROR';\n\nconst createResponseRequest = { type: CREATE_RESPONSE_REQUEST };\nconst createResponseSuccess = (newResponse) => ({ type: CREATE_RESPONSE_SUCCESS, newResponse });\nconst createResponseError = error => ({ type: CREATE_RESPONSE_ERROR, error });\n\nexport const createResponse = (session_id, question_id, student_id, section_id, value, answer) => async dispatch => {\n  dispatch(createResponseRequest);\n  try {\n\n    const response = await db_findResponse(session_id, question_id)\n    const correct = value === answer ? true : false\n\n    let newResponse;\n    if (response) {\n      newResponse = await db_updateResponse(response.response_id, value, correct)\n    } else {\n      newResponse = await db_createResponse(session_id, question_id, student_id, section_id, value, correct, false)\n    }\n\n    dispatch(createResponseSuccess(newResponse))\n\n  } catch (error) {\n    dispatch(createResponseError(error));\n  }\n};\n\nexport const FLAG_RESPONSE_REQUEST = 'FLAG_RESPONSE_REQUEST';\nexport const FLAG_RESPONSE_SUCCESS = 'FLAG_RESPONSE_SUCCESS';\nexport const FLAG_RESPONSE_ERROR = 'FLAG_RESPONSE_ERROR';\n\nconst flagResponseRequest = { type: FLAG_RESPONSE_REQUEST };\nconst flagResponseSuccess = (newResponse) => ({ type: FLAG_RESPONSE_SUCCESS, newResponse });\nconst flagResponseError = error => ({ type: FLAG_RESPONSE_ERROR, error });\n\nexport const flagResponse = (session_id, question_id, student_id, section_id, flagged) => async dispatch => {\n  dispatch(flagResponseRequest);\n  try {\n\n    const response = await db_findResponse(session_id, question_id)\n\n    let newResponse;\n    if (response) {\n      newResponse = await db_flagResponse(response.response_id, flagged)\n    } else {\n      newResponse = await db_createBareResponse(session_id, question_id, student_id, section_id, flagged)\n    }\n\n    dispatch(flagResponseSuccess(newResponse))\n\n  } catch (error) {\n    dispatch(flagResponseError(error));\n  }\n};\n\n\n\nexport const GET_SESSION_DETAIL_REQUEST = 'GET_SESSION_DETAIL_REQUEST';\nexport const GET_SESSION_DETAIL_SUCCESS = 'GET_SESSION_DETAIL_SUCCESS';\nexport const GET_SESSION_DETAIL_ERROR = 'GET_SESSION_DETAIL_ERROR';\nexport const RESET_SESSION_DETAIL = 'RESET_SESSION_DETAIL';\n\nconst getSessionDetailsRequest = { type: GET_SESSION_DETAIL_REQUEST };\nconst getSessionDetailsSuccess = (sessionDetails, sessionResponses, currentSection, currentStructure, currentQuestion, mode, allSections, currentStem, currentQuestionOrder) => ({ type: GET_SESSION_DETAIL_SUCCESS, sessionDetails, sessionResponses, currentSection, currentStructure, currentQuestion, mode, allSections, currentStem, currentQuestionOrder });\nconst getSessionDetailsError = error => ({ type: GET_SESSION_DETAIL_ERROR, error });\n\nexport const getSessionDetails = (session_id) => async dispatch => {\n  dispatch(getSessionDetailsRequest);\n  try {\n    const sessionDetails = await db_findSession(session_id)\n    const currentStructure = await db_getExamDetail(sessionDetails.structure_id)\n\n    let currentSection, currentQuestion, mode, sessionResponses, currentStem, currentQuestionOrder;\n\n\n    if (sessionDetails.completed === true) {\n\n      // Results mode\n      mode = \"results\"\n      sessionResponses = await db_getAllSessionResponses(session_id)\n\n    } else if (sessionDetails.start_time.length > 0) {\n\n      // Resuming progress\n      currentSection = currentStructure.sections.find(item => item.section_id === currentStructure.details.section_order[sessionDetails.end_time.length])\n      currentQuestionOrder = currentSection.question_order\n      sessionResponses = await db_getAllSectionResponses(sessionDetails.session_id, currentSection.section_id)\n\n      if (sessionResponses.length > 0) {\n        if (sessionResponses[0].question_id == currentSection.question_order.slice(-1)[0]) {\n          currentQuestion = await db_getQuestionDetail(sessionResponses[0].question_id)\n        } else {\n          const currentIndex = currentSection.question_order.indexOf(sessionResponses[0].question_id)\n          currentQuestion = await db_getQuestionDetail(currentSection.question_order[currentIndex + 1])\n        }\n\n        mode = \"question\"\n      } else {\n        currentQuestion = await db_getQuestionDetail(currentSection.question_order[0])\n\n        if (sessionDetails.start_time.length == sessionDetails.end_time.length) {\n          mode = \"start\"\n        } else {\n          mode = \"question\"\n        }\n      }\n\n      // Getting question stem\n      if (currentQuestion.stem_id) {\n        currentStem = await db_findStem(currentQuestion.stem_id)\n      }\n\n    } else {\n\n      // Starting a new session!\n      currentSection = currentStructure.sections[0]\n      currentQuestionOrder = currentSection.question_order\n      sessionResponses = await db_getAllSectionResponses(sessionDetails.session_id, currentSection.section_id)\n      currentQuestion = await db_getQuestionDetail(currentSection.question_order[0])\n\n      // Getting question stem\n      if (currentQuestion.stem_id) {\n        currentStem = await db_findStem(currentQuestion.stem_id)\n      }\n      mode = \"start\"\n\n    }\n\n    dispatch(getSessionDetailsSuccess(sessionDetails, sessionResponses, currentSection, currentStructure.details, currentQuestion, mode, currentStructure.sections, currentStem, currentQuestionOrder))\n\n  } catch (error) {\n    dispatch(getSessionDetailsError(error));\n  }\n};\n\nexport const resetSessionDetail = () => {\n  return {\n    type: RESET_SESSION_DETAIL\n  }\n}\n\nexport const NEXT_SECTION_REQUEST = 'NEXT_SECTION_REQUEST';\nexport const NEXT_SECTION_SUCCESS = 'NEXT_SECTION_SUCCESS';\nexport const NEXT_SECTION_ERROR = 'NEXT_SECTION_ERROR';\n\nconst nextSectionRequest = { type: NEXT_SECTION_REQUEST };\nconst nextSectionSuccess = (sessionResponses, currentSection, currentQuestion, updatedSession) => ({ type: NEXT_SECTION_SUCCESS, sessionResponses, currentSection, currentQuestion, updatedSession });\nconst nextSectionError = error => ({ type: NEXT_SECTION_ERROR, error });\n\nexport const nextSection = (session_id, section_id) => async dispatch => {\n  dispatch(nextSectionRequest);\n  try {\n    const sessionResponses = await db_getAllSectionResponses(session_id, section_id)\n    const currentSection = await db_getSectionDetail(section_id)\n    const currentQuestion = await db_getQuestionDetail(currentSection.details.question_order[0])\n    const updatedSession = await db_updateSessionTime(session_id, \"end\")\n\n    dispatch(nextSectionSuccess(sessionResponses, currentSection.details, currentQuestion, updatedSession))\n\n  } catch (error) {\n    dispatch(nextSectionError(error));\n  }\n};\n\nexport const GET_SECTION_REQUEST = 'GET_SECTION_REQUEST';\nexport const GET_SECTION_SUCCESS = 'GET_SECTION_SUCCESS';\nexport const GET_SECTION_ERROR = 'GET_SECTION_ERROR';\nexport const RESET_SECTION = 'RESET_SECTION';\n\nconst getSectionRequest = { type: GET_SECTION_REQUEST };\nconst getSectionSuccess = (currentSection, currentQuestionOrder, currentQuestion, mode) => ({ type: GET_SECTION_SUCCESS, currentSection, currentQuestionOrder, currentQuestion, mode });\nconst getSectionError = error => ({ type: GET_SECTION_ERROR, error });\n\nexport const getSection = (section_id, questions, question_id) => async dispatch => {\n  dispatch(getSectionRequest);\n  try {\n    const currentSection = await db_getSectionDetail(section_id)\n    const currentQuestion = await db_getQuestionDetail(question_id)\n\n    dispatch(getSectionSuccess(currentSection.details, questions, currentQuestion, \"answer\"))\n\n  } catch (error) {\n    dispatch(getSectionError(error));\n  }\n};\n\nexport const resetSection = () => {\n  return {\n    type: RESET_SECTION\n  }\n}\n\n\nexport const GET_SESSION_RESPONSES_REQUEST = 'GET_SESSION_RESPONSES_REQUEST';\nexport const GET_SESSION_RESPONSES_SUCCESS = 'GET_SESSION_RESPONSES_SUCCESS';\nexport const GET_SESSION_RESPONSES_ERROR = 'GET_SESSION_RESPONSES_ERROR';\nexport const RESET_SESSION_RESPONSES = 'RESET_SESSION_RESPONSES';\n\nconst getSessionResponsesRequest = { type: GET_SESSION_RESPONSES_REQUEST };\nconst getSessionResponsesSuccess = (sessionResponses) => ({ type: GET_SESSION_RESPONSES_SUCCESS, sessionResponses });\nconst getSessionResponsesError = error => ({ type: GET_SESSION_RESPONSES_ERROR, error });\n\nexport const getSessionResponses = (session_id, type, group_id) => async dispatch => {\n  dispatch(getSessionResponsesRequest);\n  try {\n    let responses\n    if (type === \"section\") {\n      responses = await db_getAllSectionResponses(session_id, group_id)\n    } else if (type === \"structure\") {\n      responses = await db_getAllSessionResponses(session_id)\n    }\n\n    dispatch(getSessionResponsesSuccess(responses))\n\n  } catch (error) {\n    dispatch(getSessionResponsesError(error));\n  }\n};\n\nexport const resetSessionResponses = () => {\n  return { type: RESET_SESSION_RESPONSES }\n}\n\nexport const CREATE_SESSION_REQUEST = 'CREATE_SESSION_REQUEST';\nexport const CREATE_SESSION_SUCCESS = 'CREATE_SESSION_SUCCESS';\nexport const CREATE_SESSION_ERROR = 'CREATE_SESSION_ERROR';\n\nconst createSessionRequest = { type: CREATE_SESSION_REQUEST };\nconst createSessionSuccess = (currentSession) => ({ type: CREATE_SESSION_SUCCESS, currentSession });\nconst createSessionError = error => ({ type: CREATE_SESSION_ERROR, error });\n\nexport const createSession = (structure_id, student_id) => async dispatch => {\n  dispatch(createSessionRequest);\n  try {\n    const currentSession = await db_createSession(structure_id, student_id)\n    dispatch(createSessionSuccess(currentSession))\n\n  } catch (error) {\n    dispatch(createSessionError(error));\n  }\n};\n\nexport const GET_QUESTION_REQUEST = 'GET_QUESTION_REQUEST';\nexport const GET_QUESTION_SUCCESS = 'GET_QUESTION_SUCCESS';\nexport const GET_QUESTION_ERROR = 'GET_QUESTION_ERROR';\n\nconst getQuestionDetailRequest = { type: GET_QUESTION_REQUEST };\nconst getQuestionDetailSuccess = (questionDetail, currentStem, mode) => ({ type: GET_QUESTION_SUCCESS, questionDetail, currentStem, mode });\nconst getQuestionDetailError = error => ({ type: GET_QUESTION_ERROR, error });\n\nexport const getQuestionDetail = (question_id, mode = \"question\") => async dispatch => {\n  dispatch(getQuestionDetailRequest);\n  try {\n    const questionDetail = await db_getQuestionDetail(question_id)\n\n    let currentStem\n    if (questionDetail.stem_id) {\n      currentStem = await db_findStem(questionDetail.stem_id)\n    }\n\n    dispatch(getQuestionDetailSuccess(questionDetail, currentStem, mode))\n\n  } catch (error) {\n    dispatch(getQuestionDetailError(error));\n  }\n};\n\nexport const REVIEW_SECTION = 'REVIEW_SECTION';\nexport const reviewSection = () => {\n  return { type: REVIEW_SECTION };\n}\n\nexport const STOP_REVIEW = 'STOP_REVIEW';\nexport const stopReview = () => {\n  return { type: STOP_REVIEW };\n}\n\nexport const START_SECTION = 'START_SECTION';\nexport const startSection = () => {\n  return { type: START_SECTION };\n}\n\nexport const STOP_SECTION_START_REQUEST = 'STOP_SECTION_START_REQUEST';\nexport const STOP_SECTION_START_SUCCESS = 'STOP_SECTION_START_SUCCESS';\nexport const STOP_SECTION_START_ERROR = 'STOP_SECTION_START_ERROR';\n\nconst stopSectionStartRequest = { type: STOP_SECTION_START_REQUEST };\nconst stopSectionStartSuccess = (updatedSession) => ({ type: STOP_SECTION_START_SUCCESS, updatedSession });\nconst stopSectionStartError = error => ({ type: STOP_SECTION_START_ERROR, error });\n\nexport const stopSectionStart = (session_id) => async dispatch => {\n  dispatch(stopSectionStartRequest);\n  try {\n    const updatedSession = await db_updateSessionTime(session_id, \"start\")\n    dispatch(stopSectionStartSuccess(updatedSession))\n\n  } catch (error) {\n    dispatch(stopSectionStartError(error));\n  }\n};\n\nexport const REVIEW_QUESTIONS_REQUEST = 'REVIEW_QUESTIONS_REQUEST';\nexport const REVIEW_QUESTIONS_SUCCESS = 'REVIEW_QUESTIONS_SUCCESS';\nexport const REVIEW_QUESTIONS_ERROR = 'REVIEW_QUESTIONS_ERROR';\n\nconst reviewQuestionsRequest = { type: REVIEW_QUESTIONS_REQUEST };\nconst reviewQuestionsSuccess = (updatedQuestionOrder) => ({ type: REVIEW_QUESTIONS_SUCCESS, updatedQuestionOrder });\nconst reviewQuestionsError = error => ({ type: REVIEW_QUESTIONS_ERROR, error });\n\nexport const reviewQuestions = (questions) => async dispatch => {\n  dispatch(reviewQuestionsRequest);\n  try {\n    dispatch(reviewQuestionsSuccess(questions))\n\n  } catch (error) {\n    dispatch(reviewQuestionsError(error));\n  }\n};\n\nexport const FINISH_SESSION_REQUEST = 'FINISH_SESSION_REQUEST';\nexport const FINISH_SESSION_SUCCESS = 'FINISH_SESSION_SUCCESS';\nexport const FINISH_SESSION_ERROR = 'FINISH_SESSION_ERROR';\n\nconst finishSessionRequest = { type: FINISH_SESSION_REQUEST };\nconst finishSessionSuccess = (finishedSession) => ({ type: FINISH_SESSION_SUCCESS, finishedSession });\nconst finishSessionError = error => ({ type: FINISH_SESSION_ERROR, error });\n\nexport const finishSession = (session_id, examDetail) => async dispatch => {\n  dispatch(finishSessionRequest);\n  try {\n\n    // Time\n    await db_updateSessionTime(session_id, \"end\")\n\n    // Score\n    let scoreBreakdown = {}\n    let score = 0\n    const allSessionResponses = await db_getAllSessionResponses(session_id)\n\n    for (let i = 0; i < examDetail.section_order.length; i++) {\n      let numCorrect = filterResponses(allSessionResponses.filter(item => item.section_id === examDetail.section_order[i]), 'correct').length\n      scoreBreakdown[examDetail.section_order[i]] = numCorrect\n      score += numCorrect\n    }\n\n    const finishedSession = await db_updateSession(session_id, {\n      completed: true,\n      score,\n      score_breakdown: scoreBreakdown\n    })\n\n    dispatch(finishSessionSuccess(finishedSession))\n\n  } catch (error) {\n    dispatch(finishSessionError(error));\n  }\n};\n\nexport const CHANGE_MODE = 'CHANGE_MODE';\nexport const changeMode = (mode) => {\n  return {\n    type: CHANGE_MODE,\n    mode\n  }\n}\n\n","import {\n  CREATE_SESSION_REQUEST,\n  CREATE_SESSION_SUCCESS,\n  CREATE_SESSION_ERROR,\n\n  GET_SESSION_RESPONSES_REQUEST,\n  GET_SESSION_RESPONSES_SUCCESS,\n  GET_SESSION_RESPONSES_ERROR,\n  RESET_SESSION_RESPONSES,\n\n  CREATE_RESPONSE_REQUEST,\n  CREATE_RESPONSE_SUCCESS,\n  CREATE_RESPONSE_ERROR,\n\n  GET_SESSION_DETAIL_REQUEST,\n  GET_SESSION_DETAIL_SUCCESS,\n  GET_SESSION_DETAIL_ERROR,\n  RESET_SESSION_DETAIL,\n\n  GET_SECTION_REQUEST,\n  GET_SECTION_SUCCESS,\n  GET_SECTION_ERROR,\n  RESET_SECTION,\n\n  GET_QUESTION_REQUEST,\n  GET_QUESTION_SUCCESS,\n  GET_QUESTION_ERROR,\n\n  NEXT_SECTION_REQUEST,\n  NEXT_SECTION_SUCCESS,\n  NEXT_SECTION_ERROR,\n\n  FINISH_SESSION_REQUEST,\n  FINISH_SESSION_SUCCESS,\n  FINISH_SESSION_ERROR,\n\n  REVIEW_SECTION,\n  STOP_REVIEW,\n\n  STOP_SECTION_START_REQUEST,\n  STOP_SECTION_START_SUCCESS,\n  STOP_SECTION_START_ERROR,\n\n  REVIEW_QUESTIONS_REQUEST,\n  REVIEW_QUESTIONS_SUCCESS,\n  REVIEW_QUESTIONS_ERROR,\n\n  FLAG_RESPONSE_REQUEST,\n  FLAG_RESPONSE_SUCCESS,\n  FLAG_RESPONSE_ERROR,\n\n  START_SECTION,\n  CHANGE_MODE\n} from '../actions/session'\n\nconst initialState = {\n  isCreatingSession: false,\n  isFetchingResponses: false,\n  isCreatingResponse: false,\n  isFetchingSession: false,\n  isFetchingQuestionDetail: false,\n  isFinishingSession: false,\n  isUpdatingSession: false,\n  isFlagging: false,\n  mode: \"question\",\n  error: null,\n  currentSession: null,\n  currentQuestion: null,\n  currentStructure: null,\n  currentSection: null,\n  currentStem: null,\n  sessionResponses: [],\n  newResponse: null,\n  allSections: [],\n  currentQuestionOrder: []\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case CREATE_SESSION_REQUEST:\n      return { ...state, isCreatingSession: true }\n    case CREATE_SESSION_SUCCESS:\n      return { ...state, isCreatingSession: false, currentSession: action.currentSession }\n    case CREATE_SESSION_ERROR:\n      return { ...state, isCreatingSession: false, error: action.error }\n\n    case GET_SESSION_RESPONSES_REQUEST:\n      return { ...state, isFetchingResponses: true }\n    case GET_SESSION_RESPONSES_SUCCESS:\n      return { ...state, isFetchingResponses: false, sessionResponses: action.sessionResponses }\n    case GET_SESSION_RESPONSES_ERROR:\n      return { ...state, isFetchingResponses: false, error: action.error }\n    case RESET_SESSION_RESPONSES:\n      return { ...state, sessionResponse: [] }\n\n    case CREATE_RESPONSE_REQUEST:\n      return { ...state, isCreatingResponse: true }\n    case CREATE_RESPONSE_SUCCESS:\n      return { ...state, isCreatingResponse: false, newResponse: action.newResponse }\n    case CREATE_RESPONSE_ERROR:\n      return { ...state, isCreatingResponse: false, error: action.error }\n\n    case FLAG_RESPONSE_REQUEST:\n      return { ...state, isFlagging: true }\n    case FLAG_RESPONSE_SUCCESS:\n      return { ...state, isFlagging: false, newResponse: action.newResponse }\n    case FLAG_RESPONSE_ERROR:\n      return { ...state, isFlagging: false, error: action.error }\n\n    case GET_QUESTION_REQUEST:\n      return { ...state, isFetchingQuestionDetail: true }\n    case GET_QUESTION_SUCCESS:\n      return { ...state, isFetchingQuestionDetail: false, currentQuestion: action.questionDetail, currentStem: action.currentStem, mode: action.mode }\n    case GET_QUESTION_ERROR:\n      return { ...state, isFetchingQuestionDetail: false, error: action.error }\n\n    case GET_SESSION_DETAIL_REQUEST:\n      return { ...state, isFetchingSession: true }\n    case GET_SESSION_DETAIL_SUCCESS:\n      return { ...state, isFetchingSession: false, mode: action.mode, currentSession: action.sessionDetails, sessionResponses: action.sessionResponses, currentStructure: action.currentStructure, currentSection: action.currentSection, currentQuestionOrder: action.currentQuestionOrder, currentQuestion: action.currentQuestion, allSections: action.allSections, currentStem: action.currentStem }\n    case GET_SESSION_DETAIL_ERROR:\n      return { ...state, isFetchingSession: false, error: action.error }\n    case RESET_SESSION_DETAIL:\n      return { ...state, sessionResponses: [], currentSession: null, currentStructure: null, currentSection: null, currentQuestion: null, finishedSession: null, mode: \"question\" }\n\n    case NEXT_SECTION_REQUEST:\n      return { ...state, isFetchingSession: true }\n    case NEXT_SECTION_SUCCESS:\n      return { ...state, isFetchingSession: false, mode: \"start\", sessionResponses: action.sessionResponses, currentSection: action.currentSection, currentQuestionOrder: action.currentSection.question_order, currentQuestion: action.currentQuestion, currentSession: action.updatedSession }\n    case NEXT_SECTION_ERROR:\n      return { ...state, isFetchingSession: false, error: action.error }\n\n    case GET_SECTION_REQUEST:\n      return { ...state, isFetchingSession: true }\n    case GET_SECTION_SUCCESS:\n      return { ...state, isFetchingSession: false, currentSection: action.currentSection, currentQuestionOrder: action.currentQuestionOrder, currentQuestion: action.currentQuestion, mode: action.mode }\n    case GET_SECTION_ERROR:\n      return { ...state, isFetchingSession: false, error: action.error }\n    case RESET_SECTION:\n      return { ...state, currentSection: null, currentQuestionOrder: null }\n\n    case FINISH_SESSION_REQUEST:\n      return { ...state, isFinishingSession: true }\n    case FINISH_SESSION_SUCCESS:\n      return { ...state, isFinishingSession: false, mode: \"results\", currentSession: action.finishedSession }\n    case FINISH_SESSION_ERROR:\n      return { ...state, isFinishingSession: false, error: action.error }\n\n    case REVIEW_SECTION:\n      return { ...state, mode: \"review\" }\n    case STOP_REVIEW:\n      return { ...state, mode: \"question\" }\n\n    case STOP_SECTION_START_REQUEST:\n      return { ...state, isUpdatingSession: true }\n    case STOP_SECTION_START_SUCCESS:\n      return { ...state, isUpdatingSession: false, mode: \"question\", currentSession: action.updatedSession }\n    case STOP_SECTION_START_ERROR:\n      return { ...state, isUpdatingSession: false, error: action.error }\n\n    case REVIEW_QUESTIONS_REQUEST:\n      return { ...state, isFetchingSession: true }\n    case REVIEW_QUESTIONS_SUCCESS:\n      return { ...state, isFetchingSession: false, currentQuestionOrder: action.updatedQuestionOrder }\n    case REVIEW_QUESTIONS_ERROR:\n      return { ...state, isFetchingSession: false, error: action.error }\n\n    case START_SECTION:\n      return { ...state, mode: \"start\" }\n\n    case CHANGE_MODE:\n      return { ...state, mode: action.mode }\n\n    default:\n      return state\n  }\n}","import {\n  db_getAllExams,\n  db_getExamDetail,\n  db_getSectionDetail,\n  db_getAllStructureSessions,\n} from '../api/db';\n\nexport const GET_ALL_EXAMS_REQUEST = 'GET_ALL_EXAMS_REQUEST';\nexport const GET_ALL_EXAMS_SUCCESS = 'GET_ALL_EXAMS_SUCCESS';\nexport const GET_ALL_EXAMS_ERROR = 'GET_ALL_EXAMS_ERROR';\n\nconst getAllExamsRequest = { type: GET_ALL_EXAMS_REQUEST };\nconst getAllExamsSuccess = (allExams) => ({ type: GET_ALL_EXAMS_SUCCESS, allExams });\nconst getAllExamsError = error => ({ type: GET_ALL_EXAMS_ERROR, error });\n\nexport const getAllExams = () => async dispatch => {\n  dispatch(getAllExamsRequest);\n  try {\n    const allExams = await db_getAllExams()\n    dispatch(getAllExamsSuccess(allExams))\n\n  } catch (error) {\n    dispatch(getAllExamsError(error));\n  }\n};\n\n\nexport const GET_EXAM_DETAIL_REQUEST = 'GET_EXAM_DETAIL_REQUEST';\nexport const GET_EXAM_DETAIL_SUCCESS = 'GET_EXAM_DETAIL_SUCCESS';\nexport const GET_EXAM_DETAIL_ERROR = 'GET_EXAM_DETAIL_ERROR';\nexport const RESET_EXAM_DETAIL = 'RESET_EXAM_DETAIL';\n\nconst getExamDetailRequest = { type: GET_EXAM_DETAIL_REQUEST };\nconst getExamDetailSuccess = (examDetail) => ({ type: GET_EXAM_DETAIL_SUCCESS, examDetail });\nconst getExamDetailError = error => ({ type: GET_EXAM_DETAIL_ERROR, error });\n\nexport const getExamDetail = (structure_id) => async dispatch => {\n  dispatch(getExamDetailRequest);\n  try {\n    const examDetail = await db_getExamDetail(structure_id)\n    dispatch(getExamDetailSuccess(examDetail))\n\n  } catch (error) {\n    dispatch(getExamDetailError(error));\n  }\n};\n\nexport const resetExamDetail = () => {\n  return {\n    type: RESET_EXAM_DETAIL\n  }\n}\n\nexport const GET_SECTION_DETAIL_REQUEST = 'GET_SECTION_DETAIL_REQUEST';\nexport const GET_SECTION_DETAIL_SUCCESS = 'GET_SECTION_DETAIL_SUCCESS';\nexport const GET_SECTION_DETAIL_ERROR = 'GET_SECTION_DETAIL_ERROR';\nexport const RESET_SECTION_DETAIL = 'RESET_SECTION_DETAIL';\n\nconst getSectionDetailRequest = { type: GET_SECTION_DETAIL_REQUEST };\nconst getSectionDetailSuccess = (sectionDetail) => ({ type: GET_SECTION_DETAIL_SUCCESS, sectionDetail });\nconst getSectionDetailError = error => ({ type: GET_SECTION_DETAIL_ERROR, error });\n\nexport const getSectionDetail = (section_id) => async dispatch => {\n  dispatch(getSectionDetailRequest);\n  try {\n    const sectionDetail = await db_getSectionDetail(section_id)\n    dispatch(getSectionDetailSuccess(sectionDetail))\n\n  } catch (error) {\n    dispatch(getSectionDetailError(error));\n  }\n};\n\nexport const resetSectionDetail = () => {\n  return {\n    type: RESET_SECTION_DETAIL\n  }\n}\n\nexport const GET_STRUCTURE_SESSIONS_REQUEST = 'GET_STRUCTURE_SESSIONS_REQUEST';\nexport const GET_STRUCTURE_SESSIONS_SUCCESS = 'GET_STRUCTURE_SESSIONS_SUCCESS';\nexport const GET_STRUCTURE_SESSIONS_ERROR = 'GET_STRUCTURE_SESSIONS_ERROR';\n\nconst getStructureSessionsRequest = { type: GET_STRUCTURE_SESSIONS_REQUEST };\nconst getStructureSessionsSuccess = (structureSessions) => ({ type: GET_STRUCTURE_SESSIONS_SUCCESS, structureSessions });\nconst getStructureSessionsError = error => ({ type: GET_STRUCTURE_SESSIONS_ERROR, error });\n\nexport const getStructureSessions = (structure_id, student_id) => async dispatch => {\n  dispatch(getStructureSessionsRequest);\n  try {\n    const sessions = await db_getAllStructureSessions(structure_id, student_id)\n    dispatch(getStructureSessionsSuccess(sessions))\n\n  } catch (error) {\n    dispatch(getStructureSessionsError(error));\n  }\n};\n\n\n\n","import {\n  GET_ALL_EXAMS_REQUEST,\n  GET_ALL_EXAMS_SUCCESS,\n  GET_ALL_EXAMS_ERROR,\n\n  GET_EXAM_DETAIL_REQUEST,\n  GET_EXAM_DETAIL_SUCCESS,\n  GET_EXAM_DETAIL_ERROR,\n  RESET_EXAM_DETAIL,\n\n  GET_SECTION_DETAIL_REQUEST,\n  GET_SECTION_DETAIL_SUCCESS,\n  GET_SECTION_DETAIL_ERROR,\n  RESET_SECTION_DETAIL,\n\n  GET_STRUCTURE_SESSIONS_REQUEST,\n  GET_STRUCTURE_SESSIONS_SUCCESS,\n  GET_STRUCTURE_SESSIONS_ERROR,\n\n} from '../actions/content'\n\nconst initialState = {\n  isFetchingExams: false,\n  isFetchingExamDetail: false,\n  isFetchingSectionDetail: false,\n  isFetchingQuestionDetail: false,\n  isFetchingSessions: false,\n  error: null,\n  allExams: [],\n  examDetail: null,\n  sectionDetail: null,\n  structureSessions: []\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_ALL_EXAMS_REQUEST:\n      return { ...state, isFetchingExams: true }\n    case GET_ALL_EXAMS_SUCCESS:\n      return { ...state, isFetchingExams: false, allExams: action.allExams }\n    case GET_ALL_EXAMS_ERROR:\n      return { ...state, isFetchingExams: false, error: action.error }\n\n    case GET_EXAM_DETAIL_REQUEST:\n      return { ...state, isFetchingExamDetail: true }\n    case GET_EXAM_DETAIL_SUCCESS:\n      return { ...state, isFetchingExamDetail: false, examDetail: action.examDetail }\n    case GET_EXAM_DETAIL_ERROR:\n      return { ...state, isFetchingExamDetail: false, error: action.error }\n    case RESET_EXAM_DETAIL:\n      return { ...state, examDetail: null }\n\n    case GET_SECTION_DETAIL_REQUEST:\n      return { ...state, isFetchingSectionDetail: true }\n    case GET_SECTION_DETAIL_SUCCESS:\n      return { ...state, isFetchingSectionDetail: false, sectionDetail: action.sectionDetail }\n    case GET_SECTION_DETAIL_ERROR:\n      return { ...state, isFetchingSectionDetail: false, error: action.error }\n    case RESET_SECTION_DETAIL:\n      return { ...state, sectionDetail: null }\n\n    case GET_STRUCTURE_SESSIONS_REQUEST:\n      return { ...state, isFetchingSessions: true }\n    case GET_STRUCTURE_SESSIONS_SUCCESS:\n      return { ...state, isFetchingSessions: false, structureSessions: action.structureSessions }\n    case GET_STRUCTURE_SESSIONS_ERROR:\n      return { ...state, isFetchingSessions: false, error: action.error }\n    default:\n      return state\n  }\n}","import {\n  db_createUser,\n  db_userExists,\n  wp_authenticate\n} from '../api/db';\nimport { getCookie, setCookie, eraseCookie } from '../utils/helpers'\nvar jwt = require('jsonwebtoken')\n\nexport const INIT_USER_REQUEST = 'INIT_USER_REQUEST';\nexport const INIT_USER_SUCCESS = 'INIT_USER_SUCCESS';\nexport const INIT_USER_ERROR = 'INIT_USER_ERROR';\nexport const GET_USER = 'GET_USER';\nexport const LOGOUT_USER = 'LOGOUT_USER';\n\nconst initUserRequest = { type: INIT_USER_REQUEST };\nconst initUserSuccess = (userData) => ({ type: INIT_USER_SUCCESS, userData });\nconst initUserError = error => ({ type: INIT_USER_ERROR, error });\n\nexport const initUser = (username, password) => async dispatch => {\n  dispatch(initUserRequest);\n  try {\n\n    const response = await wp_authenticate(username, password)\n    let userData\n\n    if (response.success) {\n      const userInfo = jwt.decode(response.data.jwt)\n\n      if (userInfo.roles.includes(\"ucat_content_subscriber\")) {\n\n        const userExists = await db_userExists(userInfo.username)\n        if (userExists == \"\") {\n          userData = await db_createUser(userInfo.username)\n        } else {\n          userData = userExists\n        }\n\n        const token = jwt.sign(userData, 'secret')\n        setCookie(\"jwt\", token, 1)\n\n        dispatch(initUserSuccess(userData))\n      } else {\n        dispatch(initUserError(\"You have not purchased the UCAT plan.\"));\n      }\n    }\n  } catch (error) {\n    dispatch(initUserError(\"Wrong credentials. Try again.\"));\n  }\n};\n\nexport const getUser = () => {\n  const userData = jwt.decode(getCookie(\"jwt\"))\n\n  return {\n    type: GET_USER,\n    userData\n  }\n}\n\nexport const logoutUser = () => {\n  eraseCookie(\"jwt\")\n\n  return {\n    type: LOGOUT_USER\n  }\n}\n\n\n","import {\n  INIT_USER_REQUEST,\n  INIT_USER_SUCCESS,\n  INIT_USER_ERROR,\n\n  GET_USER,\n\n  LOGOUT_USER\n} from '../actions/auth'\n\nconst initialState = {\n  userData: null,\n  isCreatingUser: false,\n  error: null\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case INIT_USER_REQUEST:\n      return { ...state, isCreatingUser: true }\n    case INIT_USER_SUCCESS:\n      return { ...state, isCreatingUser: false, userData: action.userData }\n    case INIT_USER_ERROR:\n      return { ...state, isCreatingUser: false, error: action.error }\n\n    case GET_USER:\n      return { ...state, userData: action.userData }\n\n    case LOGOUT_USER:\n      return { ...state, userData: null, error: null }\n\n    default:\n      return state\n  }\n}","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport session from './reducers/session';\nimport content from './reducers/content';\nimport auth from './reducers/auth';\nimport logger from 'redux-logger'\n\nexport default createStore(\n  combineReducers({ content, session, auth }),\n  applyMiddleware(thunk, logger)\n);","import React from 'react';\nimport styled from 'styled-components'\nimport Loader from 'react-loader-spinner'\n\n\nconst Loading = (props) => {\n  return (\n    <CenteredDiv\n      duringSession={props.duringSession}\n    >\n      <Loader\n        type=\"TailSpin\"\n        color=\"#2ecfb0\"\n        height={100}\n        width={100}\n      />\n    </CenteredDiv>\n  )\n}\n\nconst CenteredDiv = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  margin-top: -50px;\n  margin-left: ${props => props.duringSession ? '-50px' : '50px'};\n`\n\nexport default Loading","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux'\nimport { getAllExams } from '../actions/content'\nimport Loading from '../components/Shared/Loading'\n\nimport styled from 'styled-components'\nimport { Heading } from 'rebass'\nimport { AiOutlineArrowRight } from \"react-icons/ai\";\n\n\nconst mapDispatchToProps = { getAllExams }\n\nconst mapStateToProps = (state) => {\n  return state\n}\n\nconst Home = (props) => {\n\n  useEffect(() => {\n    props.getAllExams()\n  }, [])\n\n  if (props.content.isFetchingExams) return <Loading />\n  if (!props.content.allExams) return null\n\n  return (\n    <Container>\n      <Title>Exams</Title>\n      <ExamList>\n        {props.content.allExams.map((exam, i) => {\n          return (\n            <Card key={i}\n              onClick={() => {\n                props.history.push(\"/exam/\" + exam.structure_id.toString())\n              }}\n            >\n              <CardTop>\n                <CardHeading>{exam.name}</CardHeading>\n                <CardText>{exam.description}</CardText>\n              </CardTop>\n\n              <CardBottom>\n                <CardLength>\n                  {exam.time} min\n                </CardLength>\n                <Button>\n                  <AiOutlineArrowRight color=\"#f89800\" size={25} />\n                </Button>\n              </CardBottom>\n\n            </Card>\n          )\n        })}\n      </ExamList>\n    </Container>\n  )\n}\n\nconst Title = styled.div`\n  color: rgba(0,0,0,0.25);\n  font-family: Gilroy-Regular;\n  font-size: 17px;\n  padding: 15px 0;\n`\nconst Container = styled.div`\n  padding: 30px;\n  margin-left: 340px;\n`\n\nconst ExamList = styled.div`\n  display: flex;\n  margin-top: 20px;\n`\n\nconst CardHeading = styled.div`\n  font-family: Gilroy-Bold;\n  font-size: 22px\n`\n\nconst CardText = styled.div`\n  font-family: Gilroy-Medium;\n  font-size: 15px;\n`\n\nconst CardLength = styled.div`\n  color: rgba(0,0,0,0.3)\n`\n\nconst CardTop = styled.div`\n`\n\nconst CardBottom = styled.div`\n  flex-direction: row;\n  display: flex;\n  align-items: flex-end;\n  justify-content: space-between\n`\n\nconst Button = styled.div`\n`\n\nconst Card = styled.div`\n  background: white;\n  box-shadow: 10px 10px 20px rgba(0,0,0, 0.05);\n  padding: 20px;\n  border-radius: 15px;\n  width: 200px;\n  height: 200px;\n  margin-right: 20px;\n  cursor: pointer;\n  display: flex;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { RiFlag2Fill, RiFlag2Line } from \"react-icons/ri\";\n\nexport const Button = ({ type, label, color, onClick }) => {\n  return (\n    <Container\n      onClick={onClick}\n      color={color === \"teal\" ? '#2ecfb0' : '#f89800'}\n    >\n      {type === \"primary\" ?\n        <ButtonPrimary\n          color={color === \"teal\" ? '#2ecfb0' : '#f89800'}\n        >\n          {label}\n        </ButtonPrimary>\n        : type === \"secondary\" ?\n          <ButtonSecondary\n            color={color === \"teal\" ? '#2ecfb0' : '#f89800'}\n          >\n            {label}\n          </ButtonSecondary>\n          : null}\n    </Container>\n  )\n}\n\nexport const LinkItem = ({\n  onClick,\n  children,\n  color\n}) => {\n  return (\n    <Link\n      onClick={onClick}\n      color={color === \"teal\" ? '#2ecfb0' : '#f89800'}\n    >\n      {children}\n    </Link>\n  )\n}\n\nexport const RadioBox = ({\n  options,\n  defaultValue,\n  onClick\n}) => {\n  const [selectedOption, setSelectedOption] = useState(defaultValue ? defaultValue : null)\n  return (\n    <>\n      {options.map((item, i) => {\n        return (\n          <RadioOption\n            onClick={() => {\n              setSelectedOption(item)\n              onClick(item)\n            }}\n            key={i}\n            selected={selectedOption === item ? true : false}\n            className=\"hvr-forward\"\n          >\n            {item}\n          </RadioOption>\n        )\n      })}\n    </>\n  )\n}\n\nexport const RadioBoxAnswer = ({\n  options,\n  correctValue,\n  selectedValue\n}) => {\n  const [selectedOption, setSelectedOption] = useState(selectedValue ? selectedValue : null)\n\n  return (\n    <>\n      {options.map((item, i) => {\n        return (\n          <RadioOption\n            key={i}\n            selected={item === correctValue ? true : false}\n            wrong={item === selectedOption && correctValue !== selectedOption ? true : false}\n            className=\"hvr-forward\"\n          >\n            <OptionLeft>\n              {item}\n            </OptionLeft>\n            <OptionRight>\n              {item === selectedOption && correctValue !== selectedOption ?\n                \"Your answer: Wrong!\"\n                : item === correctValue && correctValue !== selectedOption ?\n                  \"Correct Answer\"\n                  : item === selectedOption && correctValue === selectedOption ?\n                    \"Your answer: Correct!\"\n                    : null\n              }\n            </OptionRight>\n          </RadioOption>\n        )\n      })}\n\n      {!selectedOption ?\n        <NoSelectionText>\n          You didn't select an option.\n        </NoSelectionText>\n        : null}\n\n    </>\n  )\n}\n\nexport const FlagButton = ({\n  flagged,\n  action\n}) => {\n\n  const [isFlagged, setFlagged] = useState(flagged)\n\n  return (\n    <FlagContainer\n      onClick={() => {\n        action(!isFlagged)\n        setFlagged(!isFlagged)\n      }}\n    >\n      {isFlagged ?\n        <RiFlag2Fill color=\"#f89800\" size={32} />\n        :\n        <RiFlag2Line color=\"#f89800\" size={32} />\n      }\n    </FlagContainer>\n  )\n}\n\nconst FlagContainer = styled.div`\n  cursor: pointer;\n`\n\nconst OptionLeft = styled.div`\n\n`\n\nconst OptionRight = styled.div`\n\n`\n\nconst RadioOption = styled.div`\n  background: ${props => props.wrong ? 'red' : props.selected ? '#2ecfb0' : 'white'};\n  color: ${props => props.selected || props.wrong ? 'white' : 'black'};\n  box-shadow: 10px 10px 20px rgba(0,0,0, 0.05);\n  padding: 20px;\n  border-radius: 15px;\n  margin-bottom: 10px;\n  max-width: 100%;\n  display: flex;\n  align-items: center;  \n  cursor: pointer;\n  justify-content: space-between;\n`\n\nconst Link = styled.div`\n  color: ${props => props.color};\n  font-family: Gilroy-Medium;\n  opacity: 0.5;\n  cursor: pointer;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`\n\nconst Container = styled.div`\n  cursor: pointer;\n\n  div:hover {\n    background: ${props => props.color};\n    color: white;\n  }\n`\n\nconst ButtonPrimary = styled.div`\n  background: ${props => props.color};\n  color: white;\n  border-radius: 10px;\n  padding: 10px 15px;\n  font-family: Gilroy-SemiBold;\n  cursor: pointer;\n`\n\nconst ButtonSecondary = styled.div`\n  background: white;\n  border: 1.5px solid ${props => props.color};\n  color: ${props => props.color};\n  border-radius: 10px;\n  padding: 10px 15px;\n  font-family: Gilroy-SemiBold;\n  cursor: pointer;\n`\n\nconst NoSelectionText = styled.div`\n  color: #f89800;\n  margin-top: 40px;\n  text-align: right;\n`","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux'\nimport { getExamDetail, getStructureSessions, resetExamDetail } from '../actions/content'\nimport { createSession } from '../actions/session'\nimport styled from 'styled-components'\nimport {\n  Text\n} from 'rebass'\nimport Loading from '../components/Shared/Loading'\nimport { Button } from '../components/Shared/Elements'\nimport { AiOutlineArrowRight } from \"react-icons/ai\"\nimport { useDidMountEffect } from '../utils/helpers'\nimport { TiTick } from \"react-icons/ti\";\n\nconst mapDispatchToProps = { getExamDetail, resetExamDetail, createSession, getStructureSessions }\n\nconst mapStateToProps = (state) => {\n  return state\n}\n\nconst calculateTimeLeft = (sectionTime, startTime) => {\n  const timeElapsed = (new Date().getTime() - new Date(startTime).getTime()) / 60000\n  const timeLeft = sectionTime - timeElapsed\n\n  if (timeLeft > 0) {\n    return Math.round(timeLeft)\n  } else {\n    return 0\n  }\n}\n\nconst SectionCard = ({\n  sectionName,\n  questionCount,\n  time,\n  status,\n  action\n}) => {\n  return (\n\n    <Card\n      status={status}\n      className=\"hvr-float\"\n    >\n      <CardLeft>\n        <CardTime className=\"time\">\n          {status === \"ongoing\" || status === \"future\" ?\n            <>\n              {time} <br /> min\n            </>\n            :\n            <>\n              <TiTick color=\"#f89800\" size={40} />\n            </>\n          }\n\n        </CardTime>\n\n        <CardInfo>\n          <CardTitle>{sectionName}</CardTitle>\n          <Caption>{questionCount} questions</Caption>\n        </CardInfo>\n      </CardLeft>\n\n      {action ?\n        <CardRight>\n          {action()}\n        </CardRight>\n        : null}\n\n    </Card>\n  )\n}\n\nconst Exam = (props) => {\n\n  useEffect(() => {\n    props.getExamDetail(props.match.params.structure_id)\n    console.log(props.auth.userData)\n    props.getStructureSessions(props.match.params.structure_id, props.auth.userData.student_id)\n\n    return () => {\n      props.resetExamDetail()\n    }\n\n  }, [])\n\n  useDidMountEffect(() => {\n    if (props.session.currentSession) {\n      props.history.push('/session/' + props.session.currentSession.session_id)\n    }\n  }, [props.session.currentSession])\n\n  if (props.content.isFetchingExamDetail || props.content.isFetchingSessions) return <Loading />\n  if (!props.content.examDetail || !props.content.structureSessions) return null\n\n  return (\n    <Container>\n      <PreHeading>Exam Details</PreHeading>\n\n      <Header>\n        <HeaderLeft>\n          <Title>\n            {props.content.examDetail.details.name}\n          </Title>\n          <Text>\n            {props.content.examDetail.details.description}\n          </Text>\n        </HeaderLeft>\n\n        <HeaderRight>\n          {props.content.structureSessions.length === 0 ?\n            <Button\n              type=\"primary\"\n              color=\"orange\"\n              label=\"Start Exam\"\n              onClick={() => {\n                props.createSession(props.content.examDetail.details.structure_id, props.auth.userData.student_id)\n              }}\n            />\n            : <>\n\n              {props.content.structureSessions[0].completed ?\n                <OrangeLink\n                  onClick={() => {\n                    props.createSession(props.content.examDetail.details.structure_id, props.auth.userData.student_id)\n                  }}\n                >\n                  Re-attempt Exam\n              </OrangeLink>\n                : null}\n\n              {!props.content.structureSessions[0].completed ?\n                <Button\n                  label={\"Resume Exam\"}\n                  type=\"primary\"\n                  color=\"orange\"\n                  onClick={() => {\n                    props.history.push(\"/session/\" + props.content.structureSessions[0].session_id)\n                  }}\n                />\n                : null}\n\n            </>}\n\n\n\n        </HeaderRight>\n      </Header>\n\n      <Sections>\n        {props.content.examDetail.sections.map((section, i) => {\n          const started = props.content.structureSessions.length > 0\n          let sectionStartTime = null, sectionEndTime = null\n\n          if (started) {\n            sectionStartTime = props.content.structureSessions[0].start_time[i] ? props.content.structureSessions[0].start_time[i] : null\n            sectionEndTime = props.content.structureSessions[0].end_time[i] ? props.content.structureSessions[0].end_time[i] : null\n          }\n\n          if (sectionEndTime && sectionStartTime) {\n\n            // If the section is finished!\n\n            return (\n              <SectionCard\n                key={i}\n                sectionName={section.name}\n                questionCount={section.question_order.length}\n                status=\"finished\"\n                time={null}\n                action={null}\n              />\n            )\n          } else if (sectionStartTime && !sectionEndTime) {\n\n            // If the section is currently ongoing!\n\n            const timeLeft = calculateTimeLeft(section.time, sectionStartTime)\n\n            return (\n              <SectionCard\n                key={i}\n                sectionName={section.name}\n                questionCount={section.question_order.length}\n                status=\"ongoing\"\n                time={timeLeft}\n                action={() => {\n                  return (\n                    <div onClick={() => {\n                      props.history.push('/session/' + props.content.structureSessions[0].session_id)\n                    }}>\n                      <AiOutlineArrowRight color=\"white\" size={32} />\n                    </div>\n                  )\n                }\n                }\n              />\n            )\n          } else {\n            return (\n              <SectionCard\n                key={i}\n                sectionName={section.name}\n                questionCount={section.question_order.length}\n                status=\"future\"\n                time={section.time}\n                action={null}\n              />\n            )\n          }\n\n        })}\n      </Sections>\n\n      <PastSessions>\n        {props.content.structureSessions.length > 0 ?\n          <PreHeading\n            style={{ 'padding-bottom': 10 }}\n          >Past Sessions</PreHeading>\n          : null\n        }\n\n        {props.content.structureSessions.map((session) => {\n          if (session.completed) {\n            return (\n              <Card\n                className=\"hvr-float\"\n                onClick={() => {\n                  props.history.push(`/session/${session.session_id}`)\n                }}\n                style={{\n                  cursor: 'pointer'\n                }}\n              >\n\n                <CardTitle>\n                  {new Date(session.start_time[0]).toLocaleDateString()}\n                </CardTitle>\n                <CardInfo>\n                  Score: {session.score}\n                </CardInfo>\n\n              </Card>\n            )\n          }\n        })}\n      </PastSessions>\n\n    </Container >\n  )\n}\nconst PastSessions = styled.div`\n\n`\nconst Caption = styled(Text)`\n  opacity: 0.6;\n`\nconst CardTime = styled.div`\n  height: 70px;\n  width: 70px;\n  border-radius: 20px;\n  border: 2px solid #f89800;\n  align-items: center;\n  justify-content: center;\n  display: flex;\n  text-align: center\n`\n\nconst CardInfo = styled.div`\n  margin-left: 20px;\n`\n\nconst CardTitle = styled.div`\n  font-family: Gilroy-SemiBold;\n  font-size: 20px;\n`\n\nconst Card = styled.div`\n  background: ${props => props.status === \"ongoing\" ? '#f89800' : 'white'};\n  color: ${props => props.status === \"ongoing\" ? 'white' : 'black'};\n  box-shadow: 10px 10px 20px rgba(0,0,0, 0.05);\n  padding: 15px 20px;\n  border-radius: 15px;\n  margin-bottom: 20px;\n  max-width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  .time {\n    color: ${props => props.status === \"ongoing\" ? 'white' : '#f89800'};\n  }\n`\n\nconst Container = styled.div`\n  padding: 30px;\n  margin-left: 340px;\n`\n\nconst Sections = styled.div`\n  padding: 20px 0;\n`\n\nconst Title = styled.div`\n  font-family: Gilroy-Bold;\n  font-size: 40px;\n`\n\nconst PreHeading = styled(Text)`\n  color: rgba(0,0,0,0.3);\n  padding-bottom: 40px;\n  font-family: Gilroy-Regular;\n`\n\nconst Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 40px;\n`\n\nconst HeaderLeft = styled.div`\n`\n\nconst HeaderRight = styled.div`\n  display: flex;\n  align-items: center;\n  \n  div {\n    margin-left: 10px;\n  }\n`\n\nconst CardLeft = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst CardRight = styled.div`\n  padding-right: 20px;\n  cursor: pointer;\n`\n\nconst OrangeLink = styled.div`\n  color: #f89800;\n  opacity: 0.5;\n  cursor: pointer;\n`\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Exam)\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst BottomBar = ({\n  leftContent,\n  rightContent\n}) => {\n  return (\n    <Container>\n      <BottomBarInner>\n        <BottomBarLeft>\n          {leftContent()}\n        </BottomBarLeft>\n        <BottomBarRight>\n          {rightContent()}\n        </BottomBarRight>\n      </BottomBarInner>\n    </Container>\n  )\n}\n\nexport default BottomBar\n\nconst Container = styled.div`\n  box-shadow: -10px -10px 20px rgba(0,0,0, 0.02);\n  background: white;\n  height: 70px;\n  position: absolute;\n  width: 100%;\n  bottom: 0;\n  left: 0;\n`\n\nconst BottomBarInner = styled.div`\n  width: 1000px;\n  margin: 0 auto;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  height: 100%;\n`\n\nconst BottomBarLeft = styled.div`\n  display: flex;\n  align-items: center;\n\n  div {\n    margin: 0 10px;\n  }\n`\n\nconst BottomBarRight = styled.div`\n  display: flex;\n  align-items: center;\n\n  div {\n    margin: 0 10px;\n  }\n`","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux'\nimport { getQuestionDetail, createResponse, reviewSection, getSessionResponses, flagResponse } from '../../actions/session'\nimport Loading from '../Shared/Loading'\nimport styled from 'styled-components'\nimport BottomBar from '../Session/BottomBar'\nimport { Button, LinkItem, RadioBox, FlagButton } from '../Shared/Elements'\nimport { useDidMountEffect } from '../../utils/helpers';\n\n\nconst mapDispatchToProps = { getQuestionDetail, createResponse, reviewSection, getSessionResponses, flagResponse }\n\nconst mapStateToProps = (state) => {\n  return state\n}\n\nconst Question = (props) => {\n\n  useDidMountEffect(() => {\n    props.getSessionResponses(\n      props.session.currentSession.session_id,\n      \"section\",\n      props.session.currentSection.section_id\n    )\n  }, [props.session.newResponse])\n\n  if (!props.session.currentQuestion) return null\n\n  return (\n    <>\n      {!props.session.isFetchingQuestionDetail ?\n        <Container>\n          <PreHeading>\n            <PreHeadingLeft>\n              Question {props.session.currentQuestionOrder.indexOf(props.session.currentQuestion.question_id) + 1} of {props.session.currentQuestionOrder.length}\n            </PreHeadingLeft>\n            <PreHeadingRight>\n              <FlagButton\n                flagged={\n                  props.session.sessionResponses.find(item => item.question_id === props.session.currentQuestion.question_id) ?\n                    props.session.sessionResponses.find(item => item.question_id === props.session.currentQuestion.question_id).flagged\n                    : false}\n\n                action={(flagged) => {\n                  props.flagResponse(\n                    props.session.currentSession.session_id,\n                    props.session.currentQuestion.question_id,\n                    props.auth.userData.student_id,\n                    props.session.currentSection.section_id,\n                    flagged\n                  )\n                }}\n              />\n            </PreHeadingRight>\n          </PreHeading>\n\n          <MainContent>\n            {props.session.currentStem ?\n              <QuestionStem>\n                {props.session.currentStem.text}\n              </QuestionStem>\n              : null}\n            <QuestionContent>\n              <Title>\n                {props.session.currentQuestion.question}\n              </Title>\n\n              <RadioBox\n                options={props.session.currentQuestion.options}\n                onClick={(item) => {\n                  props.createResponse(\n                    props.session.currentSession.session_id,\n                    props.session.currentQuestion.question_id,\n                    props.auth.userData.student_id,\n                    props.session.currentSection.section_id,\n                    item,\n                    props.session.currentQuestion.answer\n                  )\n                }}\n                defaultValue={() => {\n                  const response = props.session.sessionResponses.find(\n                    item => item.question_id === props.session.currentQuestion.question_id\n                  )\n\n                  if (response) {\n                    return response.value\n                  } else {\n                    return null\n                  }\n\n                }}\n              />\n            </QuestionContent>\n          </MainContent>\n\n        </Container >\n        : <Loading duringSession={true} />\n      }\n      <BottomBar\n        leftContent={() => (\n          <>\n            {props.session.currentQuestion.question_id !== props.session.currentQuestionOrder.slice(-1)[0] ?\n              <Button\n                onClick={() => {\n                  props.reviewSection()\n                }}\n                type=\"secondary\"\n                label=\"Review\"\n                color=\"orange\"\n              />\n              : null}\n          </>\n        )}\n\n        rightContent={() => (\n          <>\n            {props.session.currentQuestion.question_id !== props.session.currentQuestionOrder[0] ?\n              <LinkItem\n                color=\"teal\"\n                onClick={() => {\n                  const currentQuestionId = props.session.currentQuestion.question_id\n                  const currentQuestionIndex = props.session.currentQuestionOrder.indexOf(currentQuestionId)\n                  const nextQuestion = props.session.currentQuestionOrder[currentQuestionIndex - 1]\n                  props.getQuestionDetail(nextQuestion)\n                }}\n              >\n                Previous Question\n              </LinkItem>\n              : null}\n\n            {props.session.currentQuestion.question_id !== props.session.currentQuestionOrder.slice(-1)[0] ?\n              <Button\n                type=\"primary\"\n                label=\"Next Question\"\n                color=\"teal\"\n                onClick={() => {\n                  const currentQuestionId = props.session.currentQuestion.question_id\n                  const currentQuestionIndex = props.session.currentQuestionOrder.indexOf(currentQuestionId)\n                  const nextQuestion = props.session.currentQuestionOrder[currentQuestionIndex + 1]\n                  props.getQuestionDetail(nextQuestion)\n                }}\n              />\n              :\n              <Button\n                onClick={() => {\n                  props.reviewSection()\n                }}\n                type=\"secondary\"\n                label=\"Review\"\n                color=\"orange\"\n              />}\n          </>\n        )}\n      />\n\n    </>\n  )\n}\n\n\nconst Container = styled.div`\n  padding: 30px 0;\n`\n\nconst Title = styled.div`\n  font-family: Gilroy-Bold;\n  font-size: 25px;\n  padding-bottom: 30px;\n`\n\nconst PreHeading = styled.div`\n  font-family: Gilroy-Regular;\n  color: rgba(0,0,0,0.3);\n  padding-bottom: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between\n`\n\nconst PreHeadingRight = styled.div`\n\n`\nconst PreHeadingLeft = styled.div`\n\n`\n\nconst MainContent = styled.div`\n  display: flex;\n  align-items: flex-start;\n\n`\n\nconst QuestionContent = styled.div`\n  flex: 1;\n`\n\nconst QuestionStem = styled.div`\n  flex: 1;\n  margin-right: 40px;\n  opacity: 0.7;\n  font-family: Gilroy-Regular;\n  text-align: justify;\n  box-shadow: 10px 10px 20px rgba(0,0,0, 0.05);\n  padding: 25px;\n  background: white;\n  border-radius: 12px;\n  font-size: 13px;\n`\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Question)\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux'\nimport { getQuestionDetail, createResponse, reviewSection, getSessionResponses, flagResponse, changeMode } from '../../actions/session'\nimport Loading from '../Shared/Loading'\nimport styled from 'styled-components'\nimport BottomBar from './BottomBar'\nimport { Button, LinkItem, RadioBoxAnswer, FlagButton } from '../Shared/Elements'\nimport { useDidMountEffect } from '../../utils/helpers';\n\n\nconst mapDispatchToProps = { getQuestionDetail, createResponse, reviewSection, getSessionResponses, flagResponse, changeMode }\n\nconst mapStateToProps = (state) => {\n  return state\n}\n\nconst Answer = (props) => {\n\n  useDidMountEffect(() => {\n    props.getSessionResponses(\n      props.session.currentSession.session_id,\n      \"section\",\n      props.session.currentSection.section_id\n    )\n  }, [props.session.newResponse])\n\n  if (!props.session.currentQuestion) return null\n\n  return (\n    <>\n      {!props.session.isFetchingQuestionDetail ?\n        <Container>\n          <PreHeading>\n            <PreHeadingLeft>\n              Question {props.session.currentQuestionOrder.indexOf(props.session.currentQuestion.question_id) + 1} of {props.session.currentQuestionOrder.length}\n            </PreHeadingLeft>\n          </PreHeading>\n\n          <MainContent>\n            {props.session.currentStem ?\n              <QuestionStem>\n                {props.session.currentStem.text}\n              </QuestionStem>\n              : null}\n            <QuestionContent>\n              <Title>\n                {props.session.currentQuestion.question}\n              </Title>\n\n              <RadioBoxAnswer\n                options={props.session.currentQuestion.options}\n                correctValue={props.session.currentQuestion.answer}\n                selectedValue={() => {\n                  const response = props.session.sessionResponses.find(\n                    item => item.question_id === props.session.currentQuestion.question_id\n                  )\n                  if (response) {\n                    return response.value\n                  } else {\n                    return null\n                  }\n                }}\n              />\n            </QuestionContent>\n          </MainContent>\n\n          <ExplanationContent>\n            <PreHeading>Explanation</PreHeading>\n            {props.session.currentQuestion.explanation ?\n              <ExplanationText>\n                {props.session.currentQuestion.explanation}\n              </ExplanationText>\n              :\n              <ExplanationText>\n                There is no explanation for this question.\n                </ExplanationText>\n\n            }\n          </ExplanationContent>\n\n        </Container >\n        : <Loading duringSession={true} />\n      }\n\n      <BottomBar\n        leftContent={() => (\n          <>\n            <Button\n              onClick={() => {\n                props.changeMode(\"results\")\n              }}\n              type=\"secondary\"\n              label=\"Return to Results\"\n              color=\"orange\"\n            />\n          </>\n        )}\n\n        rightContent={() => (\n          <>\n            {props.session.currentQuestion.question_id !== props.session.currentQuestionOrder[0] ?\n              <LinkItem\n                color=\"teal\"\n                onClick={() => {\n                  const currentQuestionId = props.session.currentQuestion.question_id\n                  const currentQuestionIndex = props.session.currentQuestionOrder.indexOf(currentQuestionId)\n                  const nextQuestion = props.session.currentQuestionOrder[currentQuestionIndex - 1]\n                  props.getQuestionDetail(nextQuestion, \"answer\")\n                }}\n              >\n                Previous Question\n              </LinkItem>\n              : null}\n\n            {props.session.currentQuestion.question_id !== props.session.currentQuestionOrder.slice(-1)[0] ?\n              <Button\n                type=\"primary\"\n                label=\"Next Question\"\n                color=\"teal\"\n                onClick={() => {\n                  const currentQuestionId = props.session.currentQuestion.question_id\n                  const currentQuestionIndex = props.session.currentQuestionOrder.indexOf(currentQuestionId)\n                  const nextQuestion = props.session.currentQuestionOrder[currentQuestionIndex + 1]\n                  props.getQuestionDetail(nextQuestion, \"answer\")\n                }}\n              />\n              :\n              null}\n          </>\n        )}\n      />\n\n    </>\n  )\n}\n\nconst ExplanationContent = styled.div`\n  margin: 25px 0;\n`\n\nconst ExplanationText = styled.div`\n\n`\n\nconst Container = styled.div`\n  padding: 30px 0;\n`\n\nconst Title = styled.div`\n  font-family: Gilroy-Bold;\n  font-size: 25px;\n  padding-bottom: 30px;\n`\n\nconst PreHeading = styled.div`\n  font-family: Gilroy-Regular;\n  color: rgba(0,0,0,0.3);\n  padding-bottom: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between\n`\n\nconst PreHeadingRight = styled.div`\n\n`\nconst PreHeadingLeft = styled.div`\n\n`\n\nconst MainContent = styled.div`\n  display: flex;\n  align-items: flex-start;\n\n`\n\nconst QuestionContent = styled.div`\n  flex: 1;\n`\n\nconst QuestionStem = styled.div`\n  flex: 1;\n  margin-right: 40px;\n  opacity: 0.7;\n  font-family: Gilroy-Regular;\n  text-align: justify;\n  box-shadow: 10px 10px 20px rgba(0,0,0, 0.05);\n  padding: 25px;\n  background: white;\n  border-radius: 12px;\n  font-size: 13px;\n`\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Answer)\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux'\nimport { getSessionResponses, stopReview, getQuestionDetail, nextSection, finishSession, reviewQuestions } from '../../actions/session'\nimport BottomBar from '../Session/BottomBar'\nimport { Button } from '../Shared/Elements'\nimport styled from 'styled-components'\nimport {\n  Text\n} from 'rebass'\nimport { RiFlag2Fill } from \"react-icons/ri\";\nimport { getIncompleteQuestions, filterResponses } from '../../utils/helpers'\n\nconst mapDispatchToProps = { getSessionResponses, stopReview, getQuestionDetail, nextSection, finishSession, reviewQuestions }\n\nconst mapStateToProps = (state) => {\n  return state\n}\n\nconst Review = (props) => {\n  const incompleteQuestions = getIncompleteQuestions(props.session.currentSection.question_order, props.session.sessionResponses)\n  const flaggedQuestions = filterResponses(props.session.sessionResponses, \"flagged\")\n\n  useEffect(() => {\n    props.reviewQuestions(props.session.currentSection.question_order)\n  }, [])\n\n  return (\n    <>\n      <Container>\n        <Title>Review</Title>\n\n        <QuestionCards>\n          {props.session.currentSection.question_order.map((question_id, i) => {\n            const answered = props.session.sessionResponses.find(item => item.question_id === question_id)\n\n            return (\n              <Card key={i} onClick={() => {\n                props.getQuestionDetail(question_id)\n              }}\n                answered={answered && answered.value ? true : false}\n                className=\"hvr-float\"\n              >\n                <Text>Question {i + 1}</Text>\n                {!answered ? null :\n                  <>\n                    {answered.flagged ?\n                      <RiFlag2Fill color={\n                        answered.value ? 'white' : '#f89800'\n                      } size={20} />\n                      :\n                      null\n                    }\n                  </>\n                }\n              </Card>\n            )\n          })}\n        </QuestionCards>\n      </Container >\n      <BottomBar\n        leftContent={() => (\n          <>\n            {incompleteQuestions.length > 0 ?\n              <Button\n                type=\"secondary\"\n                color=\"orange\"\n                label=\"Review Incomplete\"\n                onClick={() => {\n                  props.reviewQuestions(incompleteQuestions)\n                  props.getQuestionDetail(incompleteQuestions[0])\n                }}\n              />\n              : null}\n\n            {flaggedQuestions.length > 0 ?\n              <Button\n                type=\"secondary\"\n                color=\"orange\"\n                label=\"Review Flagged\"\n                onClick={() => {\n                  props.reviewQuestions(flaggedQuestions)\n                  props.getQuestionDetail(flaggedQuestions[0])\n                }}\n              />\n              : null}\n\n            <Button\n              type=\"secondary\"\n              color=\"orange\"\n              label=\"Review All\"\n              onClick={() => {\n                props.getQuestionDetail(props.session.currentSection.question_order[0])\n              }}\n            />\n          </>\n        )}\n\n        rightContent={() => (\n          <>\n            {props.session.currentSection.section_id !== props.session.currentStructure.section_order.slice(-1)[0]\n              ?\n              <Button\n                type=\"primary\"\n                color=\"teal\"\n                label=\"Next Section\"\n                onClick={() => {\n                  const currentSectionId = props.session.currentSection.section_id\n                  const currentSectionIndex = props.session.currentStructure.section_order.indexOf(currentSectionId)\n                  props.nextSection(\n                    props.session.currentSession.session_id,\n                    props.session.currentStructure.section_order[currentSectionIndex + 1]\n                  )\n                }}\n              />\n              :\n\n              <Button\n                onClick={() => {\n                  props.finishSession(props.session.currentSession.session_id, props.session.currentStructure)\n                }}\n                type=\"primary\"\n                color=\"teal\"\n                label=\"Finish Exam\"\n              />\n            }\n          </>\n        )}\n      />\n    </>\n  )\n}\n\nconst Title = styled.div`\n  font-size: 20px;\n  font-family: Gilroy-Bold;\n  padding-bottom: 40px;\n`\nconst Container = styled.div`\n  padding: 30px 0;\n`\nconst QuestionCards = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`\nconst Card = styled.div`\n  background: ${props => props.answered ? '#2ecfb0' : 'white'};\n  color: ${props => props.answered ? 'white' : 'black'};\n\n  box-shadow: 10px 10px 20px rgba(0,0,0, 0.05);\n  padding: 20px;\n  border-radius: 15px;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  flex-basis: 28.5%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  cursor: pointer;\n\n  &:nth-child(3n) {\n    margin-right: 0;\n  }\n`\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Review)\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux'\nimport { stopSectionStart } from '../../actions/session'\nimport Loading from '../Shared/Loading'\nimport BottomBar from '../Session/BottomBar'\nimport styled from 'styled-components'\n\nconst mapDispatchToProps = { stopSectionStart }\n\nconst mapStateToProps = (state) => {\n  return state\n}\n\nconst Start = (props) => {\n\n  if (props.session.isFetchingSession) return <Loading duringSession={true} />\n  if (!props.session.currentSection || !props.session.currentSession) return null\n\n  return (\n    <>\n      <Container>\n        <WelcomeMessage>\n          Welcome to {props.session.currentSection.name}\n        </WelcomeMessage>\n\n        <Info>\n          This section has <b>{props.session.currentSection.question_order.length}</b> questions and is <b>{props.session.currentSection.time}</b> minutes in total.\n        </Info>\n\n        <Warning>\n          Once you start the timer, you cannot pause this section.\n        </Warning>\n      </Container>\n\n      <BottomBar\n        leftContent={()=>(\n          <Link\n              onClick={() => {\n                props.returnHome();\n              }}\n            >I don't want to start this section now</Link>\n        )}\n        \n        rightContent={()=>(\n          <Button\n              onClick={() => {\n                props.stopSectionStart(props.session.currentSession.session_id)\n              }}\n            >\n          Start Section!\n          </Button>\n        )}\n\n      />\n\n    </>\n  )\n}\n\nconst Container = styled.div`\n  padding: 30px 0;\n  color: rgba(0,0,0,0.4)\n`\n\nconst Button = styled.div`\n  background: #2ecfb0;\n  color: white;\n  border-radius: 10px;\n  padding: 10px 15px;\n  font-family: Gilroy-SemiBold;\n  cursor: pointer;\n`\n\nconst WelcomeMessage = styled.div`\n  font-family: Gilroy-Bold;\n  text-transform: uppercase;\n  padding-bottom: 20px;\n`\n\nconst Info = styled.div`\n  padding-bottom: 20px;\n`\n\nconst Warning = styled.div`\n\n`\n\nconst Link = styled.div`\n  color: #f89800;\n  cursor: pointer;\n`\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Start)\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux'\nimport { getSessionResponses, getQuestionDetail, getSection, resetSection } from '../../actions/session'\nimport Loading from '../Shared/Loading'\nimport { Button } from '../Shared/Elements'\nimport styled from 'styled-components'\nimport {\n  Text\n} from 'rebass'\nimport { TiTick, TiTimes } from \"react-icons/ti\";\nimport BottomBar from './BottomBar'\nimport { getIncompleteQuestions, filterResponses } from '../../utils/helpers'\n\nconst mapDispatchToProps = { getSessionResponses, getQuestionDetail, getSection, resetSection }\n\nconst mapStateToProps = (state) => {\n  return state\n}\n\nconst Results = (props) => {\n\n  useEffect(() => {\n    props.getSessionResponses(props.session.currentSession.session_id, \"structure\")\n    props.resetSection()\n    // return () => {\n    //   props.stopSection()\n    // }\n  }, [])\n\n  if (!props.session.allSections || !props.session.currentSession || !props.session.sessionResponses) return null\n\n  return (\n    <>\n      {!props.session.isFetchingResponses ?\n        <Container>\n          <PreHeading>Results</PreHeading>\n          {props.session.allSections.map((section, i) => {\n            return (\n              <SectionBox\n                key={i}\n              >\n                <SectionHeader>\n                  <SectionTitle>\n                    {section.name}\n                  </SectionTitle>\n\n                  <SectionScore>\n                    {props.session.currentSession.score_breakdown[section.section_id.toString()]} Correct <br />\n                    {section.question_order.length - props.session.currentSession.score_breakdown[section.section_id.toString()]} Incorrect\n                  </SectionScore>\n                </SectionHeader>\n\n                <SectionCards>\n                  {section.question_order.map((question_id, j) => {\n                    const response = props.session.sessionResponses.find(item => item.question_id === question_id)\n\n                    return (\n                      <Card\n                        key={j}\n                        correct={response && response.correct ? true : false}\n                        onClick={() => {\n                          props.getSection(section.section_id, section.question_order, question_id)\n                        }}\n                      >\n                        <Text>Question {j + 1}</Text>\n                        {response && response.correct ?\n                          <TiTick color=\"white\" size={30} />\n                          : <TiTimes color=\"#f89800\" size={30} />\n                        }\n                      </Card>\n                    )\n                  })}\n                </SectionCards>\n              </SectionBox>\n            )\n          })}\n        </Container>\n        : <Loading duringSession={true} />}\n      <BottomBar\n        rightContent={() => (\n          <>\n            {/*\n            <Button\n              label=\"Review Incorrect\"\n              type=\"secondary\"\n              color=\"orange\"\n              onClick={props.returnHome}\n            />\n            <Button\n              label=\"Review Flagged\"\n              type=\"secondary\"\n              color=\"orange\"\n              onClick={props.returnHome}\n            />\n            <Button\n              label=\"Review All\"\n              type=\"secondary\"\n              color=\"orange\"\n              onClick={props.returnHome}\n            />\n            */}\n          </>\n        )}\n\n        leftContent={() => (\n          <>\n            <Button\n              label=\"Return Home\"\n              type=\"secondary\"\n              color=\"orange\"\n              onClick={props.returnHome}\n            />\n          </>\n        )}\n      />\n    </>\n  )\n}\n\nconst PreHeading = styled.div`\n  font-family: Gilroy-Regular;\n  color: rgba(0,0,0,0.3);\n  padding-bottom: 10px;\n`\n\nconst Container = styled.div`\n  padding: 30px 0;\n`\nconst SectionTitle = styled.div`\n  font-family: Gilroy-Bold;\n  padding: 15px 0;\n  font-size: 20px;\n`\n\nconst SectionCards = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`\nconst Card = styled.div`\n  background: ${props => props.correct ? '#2ecfb0' : 'white'};\n  color: ${props => props.correct ? 'white' : 'black'};\n  box-shadow: 10px 10px 20px rgba(0,0,0, 0.05);\n  padding: 20px;\n  border-radius: 15px;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  flex-basis: 28.5%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  cursor: pointer;\n\n  &:nth-child(3n) {\n    margin-right: 0;\n  }\n`\n\nconst SectionHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n`\n\nconst SectionScore = styled.div`\n  opacity: 0.3;\n  padding-bottom: 10px;\n`\n\nconst SectionBox = styled.div`\n`\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Results)\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux'\nimport { getSessionDetails, resetSessionDetail } from '../actions/session'\nimport Loading from '../components/Shared/Loading'\nimport styled from 'styled-components'\nimport LogoImage from '../assets/in2medlogo.png'\n\nimport Question from '../components/Session/Question'\nimport Answer from '../components/Session/Answer'\nimport Review from '../components/Session/Review';\nimport Start from '../components/Session/Start';\nimport Results from '../components/Session/Results';\n\n\nconst mapDispatchToProps = { getSessionDetails, resetSessionDetail }\n\nconst mapStateToProps = (state) => {\n  return state\n}\n\nconst Timer = ({\n  startTimestamp,\n  sectionTimeLength\n}) => {\n\n  const calculateTimeLeft = () => {\n    const totalTime = (sectionTimeLength * 60000)\n    const currentTime = new Date().getTime()\n    const startTime = new Date(startTimestamp).getTime()\n    const timeRemaining = (totalTime - (currentTime - startTime)) / 60000\n\n    return timeRemaining.toFixed(2)\n  }\n\n  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft())\n\n  useEffect(() => {\n\n    const timer = setTimeout(() => {\n      setTimeLeft(calculateTimeLeft());\n    }, 1000);\n\n    return () => clearTimeout(timer);\n\n  })\n\n  if (!startTimestamp) return null\n\n  if (!timeLeft) return null\n\n  return (\n    <>\n      {timeLeft} minutes left\n    </>\n  )\n}\n\nconst Session = (props) => {\n\n  useEffect(() => {\n    props.getSessionDetails(props.match.params.session_id)\n\n    return () => {\n      props.resetSessionDetail()\n    }\n  }, [])\n\n  if (props.session.isFetchingSession) return <Loading duringSession={true} />\n  if (!props.session.currentSession) return null\n\n  return (\n    <>\n\n      <TopBar>\n        <TopBarInner>\n          <TopBarLeft>\n            {props.session.currentSection ? props.session.currentSection.name : null}\n          </TopBarLeft>\n          <img src={LogoImage} width=\"100\" />\n          <TopBarRight>\n            {props.session.currentSession.start_time.length > 0 && props.session.currentSession.start_time.length != props.session.currentSession.end_time.length\n              ? <Timer\n                startTimestamp={props.session.currentSession.start_time[props.session.currentStructure.section_order.indexOf(props.session.currentSection.section_id)]}\n                sectionTimeLength={props.session.currentSection.time}\n              />\n              : null}\n          </TopBarRight>\n        </TopBarInner>\n      </TopBar>\n\n      <Container>\n\n        {props.session.mode === \"review\" ? <Review />\n          : props.session.mode === \"question\" ?\n            <Question />\n            : props.session.mode === \"answer\" ?\n              <Answer />\n              : props.session.mode === \"start\" ?\n                <Start\n                  returnHome={() => props.history.push('/exam/' + props.session.currentSession.structure_id)}\n                />\n                : props.session.mode === \"results\" ?\n                  <Results\n                    returnHome={() => props.history.push('/exam/' + props.session.currentSession.structure_id)}\n                  />\n                  : null\n        }\n      </Container>\n    </>\n  )\n}\nconst Container = styled.div`\n  padding: 30px;\n  width: 1000px;\n  margin: 0 auto;\n`\nconst TopBar = styled.div`\n  box-shadow: 10px 10px 20px rgba(0,0,0, 0.02);\n  background: white;\n  height: 70px;\n  width: 100%;\n`\n\nconst TopBarInner = styled.div`\n  width: 1000px;\n  height: 100%;\n  margin: 0 auto;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nconst TopBarLeft = styled.div`\n`\nconst TopBarRight = styled.div`\n`\nexport default connect(mapStateToProps, mapDispatchToProps)(Session)\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux'\nimport { initUser } from '../actions/auth'\nimport styled from 'styled-components'\nimport Logo from '../assets/in2medlogo.png'\nimport { Button } from '../components/Shared/Elements'\nimport Loading from '../components/Shared/Loading'\n\nconst mapDispatchToProps = { initUser }\nconst mapStateToProps = (state) => {\n  return state\n}\n\nconst Login = (props) => {\n  const [username, setUsername] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    if (props.auth.userData) {\n      props.setAuthenticated(true)\n      setLoading(false)\n    }\n  }, [props.auth.userData])\n\n  return (\n    <Container>\n      <LoginLogo src={Logo} />\n      {loading ?\n        <LoadingContainer>\n          <Loading\n            duringSession={true}\n          />\n        </LoadingContainer>\n        :\n        <>\n          {\n            props.auth.error ?\n              <ErrorMessage>\n                {props.auth.error}\n              </ErrorMessage>\n              : null\n          }\n\n          <LoginBox>\n            <input type=\"text\" placeholder='Email' onChange={e => {\n              setUsername(e.target.value)\n            }} />\n            <input type=\"password\" placeholder='Password' onChange={e => {\n              setPassword(e.target.value)\n            }} />\n            <span\n              style={{\n                \"align-self\": \"flex-end\"\n              }}\n            >\n              <Button\n                type=\"primary\"\n                color=\"orange\"\n                label=\"Login\"\n                onClick={async () => {\n                  setLoading(true)\n                  await props.initUser(username, password)\n                  setLoading(false)\n                }}\n              />\n            </span>\n          </LoginBox>\n        </>\n      }\n\n    </Container>\n  )\n}\nconst LoadingContainer = styled.div`\n  margin: 70px 0;\n`\nconst LoginLogo = styled.img`\n  width: 150px;\n  margin-bottom: 20px;\n`\nconst LoginBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background: white;\n  padding: 40px;\n  border-radius: 15px;\n  box-shadow: 10px 10px 20px rgba(0,0,0, 0.05);\n\n  input {\n    margin-bottom: 10px;\n    font-size: 15px;\n    width: 300px;\n    border-radius: 5px;\n    border: 1px solid #eeeeee;\n    padding: 10px;\n    font-family: Gilroy-Regular;\n  }\n\n`\n\nconst Container = styled.div`\n  width: 100%;\n  min-height: 90vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\n\nconst ErrorMessage = styled.div`\n  color: red;\n  padding: 20px;\n`\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components'\nimport LogoImage from '../../assets/in2medlogo.png'\nimport { connect } from 'react-redux'\nimport { eraseCookie } from '../../utils/helpers'\nimport { logoutUser } from '../../actions/auth'\n\nconst mapDispatchToProps = { logoutUser }\n\nconst mapStateToProps = (state) => {\n  return state\n}\n\nconst NavBar = (props) => {\n\n  const [visible, setVisible] = useState(true)\n\n  useEffect(() => {\n    if (props.location.pathname.includes(\"session\")) {\n      setVisible(false)\n    } else {\n      setVisible(true)\n    }\n  }, [props.location.pathname])\n\n  if (!visible || !props.auth.userData) return null\n\n  return (\n    <Container>\n      <Logo>\n        <img src={LogoImage} width={150} />\n      </Logo>\n\n      <UserInfo>\n        <span style={{ 'opacity': '0.7' }}>Welcome,</span>\n        <span style={{ 'font-size': '20px', 'font-weight': 'bold' }}>{props.auth.userData.username}</span>\n        <span\n          style={{ 'opacity': '0.7', 'text-align': 'right', 'width': '100%', 'cursor': 'pointer' }}\n          onClick={() => {\n            props.logoutUser()\n            props.setAuthenticated(false)\n          }}\n        >\n          Log Out\n        </span>\n      </UserInfo>\n\n      <Nav>\n        <NavItem\n          active={true}\n          onClick={() => {\n            props.history.push('/')\n          }}\n        >\n          Exams\n        </NavItem>\n        <NavItem\n          active={false}\n        >\n          Statistics\n        </NavItem>\n      </Nav>\n    </Container>\n  )\n}\n\nconst NavItem = styled.div`\n  border-radius: 15px;\n  background: ${props => props.active ? '#2ecfb0' : 'white'};\n  color: ${props => props.active ? 'white' : 'rgba(0, 0, 0, 0.5)'};\n  padding: 13px 20px;\n  margin-bottom: 15px;\n  cursor: pointer;\n  box-shadow: ${props => props.active ? '5px 5px 10px rgba(0,0,0, 0.1);' : 'none'}\n\n`\nconst Nav = styled.div`\n  padding: 40px;\n`\nconst Logo = styled.div`\n  margin: 20px 0;\n  text-align: center;\n  font-family: Gilroy-Bold;\n`\n\nconst Container = styled.div`\n  position: fixed;\n  height: 100%;\n  background: white;\n  width: 320px;\n`\n\nconst UserInfo = styled.div`\n  background: #2ECFAF;\n  padding: 40px;\n  color: white;\n  display: flex;\n  flex-direction: column\n`\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar)","import React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { ThemeProvider } from 'emotion-theming'\nimport theme from '@rebass/preset'\nimport { connect } from 'react-redux'\nimport { getCookie } from './utils/helpers'\n\nimport Home from './screens/Home'\nimport Exam from './screens/Exam'\nimport Session from './screens/Session'\nimport Login from './screens/Login'\nimport NavBar from './components/Header/NavBar'\nimport Loading from './components/Shared/Loading'\n\nimport { getUser } from './actions/auth'\n\nconst mapDispatchToProps = { getUser }\n\nconst mapStateToProps = (state) => {\n  return state\n}\n\nconst App = (props) => {\n  const [authenticated, setAuthenticated] = useState(false)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const token = getCookie(\"jwt\")\n\n    if (token) {\n      props.getUser()\n      setAuthenticated(true)\n    }\n\n    setLoading(false)\n  }, [])\n\n  if (loading) {\n    return <Loading />\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n\n      <Router>\n        {authenticated ?\n          <>\n            <Route render={(props) => <NavBar {...props} setAuthenticated={setAuthenticated} />} />\n            <Switch>\n              <Route path={'/session/:session_id'} component={Session} />\n              <Route path={'/exam/:structure_id'} component={Exam} />\n              <Route path='/' component={Home} />\n            </Switch>\n          </>\n          :\n          <>\n            <Route render={(props) => <Login {...props} setAuthenticated={setAuthenticated} />} />\n          </>\n        }\n      </Router>\n\n\n    </ThemeProvider>\n  )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport './App.css'\nimport './assets/hover-min.css'\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/in2medlogo.d28a7037.png\";"],"sourceRoot":""}